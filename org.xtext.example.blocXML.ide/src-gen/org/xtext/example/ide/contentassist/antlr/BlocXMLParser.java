/*
 * generated by Xtext 2.29.0
 */
package org.xtext.example.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.ide.contentassist.antlr.internal.InternalBlocXMLParser;
import org.xtext.example.services.BlocXMLGrammarAccess;

public class BlocXMLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BlocXMLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BlocXMLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTagAccess().getAlternatives_5(), "rule__Tag__Alternatives_5");
			builder.put(grammarAccess.getExportModelAccess().getGroup(), "rule__ExportModel__Group__0");
			builder.put(grammarAccess.getNetlistTypeAccess().getGroup(), "rule__NetlistType__Group__0");
			builder.put(grammarAccess.getNetlistTypeAccess().getGroup_4(), "rule__NetlistType__Group_4__0");
			builder.put(grammarAccess.getLayerAccess().getGroup(), "rule__Layer__Group__0");
			builder.put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getTagAccess().getGroup(), "rule__Tag__Group__0");
			builder.put(grammarAccess.getNodesAccess().getGroup(), "rule__Nodes__Group__0");
			builder.put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
			builder.put(grammarAccess.getLinkAccess().getGroup(), "rule__Link__Group__0");
			builder.put(grammarAccess.getExportModelAccess().getExportAssignment_1(), "rule__ExportModel__ExportAssignment_1");
			builder.put(grammarAccess.getNetlistTypeAccess().getDocnameAssignment_3(), "rule__NetlistType__DocnameAssignment_3");
			builder.put(grammarAccess.getNetlistTypeAccess().getDoctypeAssignment_4_1(), "rule__NetlistType__DoctypeAssignment_4_1");
			builder.put(grammarAccess.getNetlistTypeAccess().getLayerAssignment_6(), "rule__NetlistType__LayerAssignment_6");
			builder.put(grammarAccess.getNetlistTypeAccess().getNodesAssignment_9(), "rule__NetlistType__NodesAssignment_9");
			builder.put(grammarAccess.getLayerAccess().getCoucheNameAssignment_1(), "rule__Layer__CoucheNameAssignment_1");
			builder.put(grammarAccess.getLayerAccess().getComponentsAssignment_4(), "rule__Layer__ComponentsAssignment_4");
			builder.put(grammarAccess.getComponentAccess().getCompoIdAssignment_1(), "rule__Component__CompoIdAssignment_1");
			builder.put(grammarAccess.getComponentAccess().getCompoIdaAssignment_3(), "rule__Component__CompoIdaAssignment_3");
			builder.put(grammarAccess.getComponentAccess().getCompoIdfAssignment_5(), "rule__Component__CompoIdfAssignment_5");
			builder.put(grammarAccess.getComponentAccess().getCompoIdtAssignment_7(), "rule__Component__CompoIdtAssignment_7");
			builder.put(grammarAccess.getComponentAccess().getVarsAssignment_9(), "rule__Component__VarsAssignment_9");
			builder.put(grammarAccess.getVariableAccess().getVarNameAssignment_1(), "rule__Variable__VarNameAssignment_1");
			builder.put(grammarAccess.getVariableAccess().getTagsAssignment_3(), "rule__Variable__TagsAssignment_3");
			builder.put(grammarAccess.getTagAccess().getTagNumAssignment_1(), "rule__Tag__TagNumAssignment_1");
			builder.put(grammarAccess.getTagAccess().getTagNameAssignment_3(), "rule__Tag__TagNameAssignment_3");
			builder.put(grammarAccess.getTagAccess().getVarAssignment_5_0(), "rule__Tag__VarAssignment_5_0");
			builder.put(grammarAccess.getTagAccess().getTagNumAssignment_7(), "rule__Tag__TagNumAssignment_7");
			builder.put(grammarAccess.getNodesAccess().getNodesAssignment_1(), "rule__Nodes__NodesAssignment_1");
			builder.put(grammarAccess.getNodeAccess().getNodeNameAssignment_1(), "rule__Node__NodeNameAssignment_1");
			builder.put(grammarAccess.getNodeAccess().getLinksAssignment_3(), "rule__Node__LinksAssignment_3");
			builder.put(grammarAccess.getLinkAccess().getCompIDAssignment_1(), "rule__Link__CompIDAssignment_1");
			builder.put(grammarAccess.getLinkAccess().getPortIDAssignment_3(), "rule__Link__PortIDAssignment_3");
			builder.put(grammarAccess.getLinkAccess().getPortNameAssignment_5(), "rule__Link__PortNameAssignment_5");
			builder.put(grammarAccess.getLinkAccess().getPortName2Assignment_7(), "rule__Link__PortName2Assignment_7");
			builder.put(grammarAccess.getLinkAccess().getBaliseFermanteAssignment_8(), "rule__Link__BaliseFermanteAssignment_8");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BlocXMLGrammarAccess grammarAccess;

	@Override
	protected InternalBlocXMLParser createParser() {
		InternalBlocXMLParser result = new InternalBlocXMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BlocXMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BlocXMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
